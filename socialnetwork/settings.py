"""
Django's settings for socialnetwork project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from social_core.backends.google import GoogleOAuth2
import sqlite3

# con = sqlite3.connect('C:\\Users\\Roya\\Desktop\\MITPROJECTRGH\\MITPROJECTRGH.db')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lp=*vix4nve!zeewlth*8e9#4%89u@ha9e_pe-$rlyg3t^t!+$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS is a security setting that specifies which hostnames are allowed to serve your Django project. This
# is a crucial setting to prevent DNS rebinding attacks.
ALLOWED_HOSTS = ['.vercel.app', 'localhost', '127.0.0.1', '.now.sh']

# Application definition
# INSTALLED_APPS is a setting that tells Django which apps are part of your project.
# Here, you've included a mix of built-in Django apps, third-party apps, and your own custom apps.
INSTALLED_APPS = [
    'whitenoise',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Add our new application
    'main',
    'direct',
    'crispy_forms',
    'crispy_bulma',
    'crispy_bootstrap4',
    'widget_tweaks',
    'django_summernote',
    'django.contrib.sites',
    'social_django',
    'social_core',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

]

# This sets the site ID for your Django project. Django allows you to run multiple sites
# from the same project, and this setting specifies which site to use. In this case,
# it's set to 1, which is the default site.
SITE_ID = 3

# This setting allows users to log in using social accounts (like Google, Facebook, etc.)
# by visiting a URL (GET request) instead of requiring a form submission (POST request).
# This makes the login process a bit simpler.
SOCIALACCOUNT_LOGIN_ON_GET = True

# ADMIN_SITE_AUTH_BACKEND = 'django.contrib.auth.backends.ModelBackend'
# SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'http://127.0.0.1:8000/social_auth/complete/google-oauth2/'

# Middleware classes are used to process requests and responses in Django. They provide a way to execute code during
# the request/response cycle, allowing for tasks like authentication, CSRF protection, and content compression.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # static files serving
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'socialnetwork.urls'

# By configuring the template engine this way, Django will:
# 1. Look for templates in the project's templates directory and in the templates directory of each installed app.
# 2. Use the built-in Django template engine to render templates.
# 3. Provide various context variables and functions to templates through the specified context processors.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # 'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

# By setting WSGI_APPLICATION to 'socialnetwork.wsgi.application', you're telling Django to use the WSGI application
# defined in the socialnetwork/wsgi.py file.

# WSGI_APPLICATION = 'socialnetwork.wsgi.application'
WSGI_APPLICATION = 'socialnetwork.wsgi.app'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# You're configuring the database settings for your Django project!
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'MITPROJECTRGH.db'),
        'HOST': '',
        'USER': '',
        'PASSWORD': '',
        # This setting controls the lifetime of database connections. By setting it to 0, you're telling Django to close
        # database connections as soon as they're no longer in use.
        'CONN_MAX_AGE': 0,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

# By including these validators, you're enforcing stronger password policies for your users, which helps improve
# account security. When a user creates or changes their password, Django will run these validators to ensure the
# password meets the specified criteria. If any validator fails, the user will be prompted to choose a stronger
# password.

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD is a setting that specifies the default type of auto field (primary key) to use for models in
# your project. By setting it to 'django.db.models.BigAutoField', you're telling Django to use a 64-bit integer field
# (BigAutoField) as the default primary key field for your models. This allows for a much larger range of values than
# the standard AutoField (which is a 32-bit integer field)
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# This sets the URL prefix for serving static files. When Django serves static files, it will use this prefix
# followed by the path to the file. For example, if you have a file called style. css in your static directory,
# the URL to access it would be /static/style.css.
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATICFILES_root = [
    os.path.join(BASE_DIR, 'staticfiles_build' 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# This sets the URL prefix for serving media files, such as user-uploaded files (e.g., images, videos, documents).
# When Django serves media files, it will use this prefix followed by the path to the file.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# By setting these URLs, you're telling Django where to redirect users after they log in or out,
# and where to send them when they need to log in.
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'signin'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = '/'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '262400296226-ubuj0pm9jta8t10rab9kvcni2f972m21.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'

# This backend provides authentication functionality for allauth, including: - Login/Logout functionality - Password
# management (e.g., password reset) - Account management (e.g., email verification) - Social account authentication (
# e.g., Google, Facebook, Twitter) By using this backend, you're delegating authentication responsibilities to
# allauth, which provides a robust and scalable authentication system.
AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'allauth.account.auth_backends.AuthenticationBackend'
]

# This configuration allows your app to request access to the user's Google profile and email address when they
# authenticate using their Google account.
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# You're configuring email settings for your Django project!
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_FROM = 'roya@gmail.com'
EMAIL_HOST_USER = 'roya@gmail.com'
EMAIL_HOST_PASSWORD = ''

# By using bootstrap4 as the template pack, you'll get a consistent and professional-looking design for your forms,
# without having to write a lot of custom HTML and CSS. This means that crispy-forms will use the bootstrap4 template
# pack to render your forms, which will give them a Bootstrap 4-style layout and design.
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap4'
CRISPY_TEMPLATE_PACK = 'bootstrap4'

TESTING = 'test' in sys.argv[1:]
if TESTING:
    print('=========================')
    print('In TEST Mode - Disabling Migrations')
    print('=========================')


    class DisableMigrations(object):

        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None


    MIGRATION_MODULES = DisableMigrations()

